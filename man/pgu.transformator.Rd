% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pguTransformator.R
\name{pgu.transformator}
\alias{pgu.transformator}
\title{pgu.transformator}
\format{
\link[R6:R6Class]{R6::R6Class} object.
}
\description{
Transforms the data of pguIMP.
}
\details{
Performs a data transfromation in order to achieve a normally distributed version of the dataframe.
}
\section{Construction}{

x <- pguIMP::pgu.transformator$new(data)
}

\examples{

## ------------------------------------------------
## Method `pgu.transformator$new`
## ------------------------------------------------

y <- tibble:tibble()
x <- pguIMP:pgu.transformator$new(data_df = y)

## ------------------------------------------------
## Method `pgu.transformator$print`
## ------------------------------------------------

x$print()
print(x)

## ------------------------------------------------
## Method `pgu.transformator$resetTrafoParameter`
## ------------------------------------------------

x$resetTrafoParameter(data)

## ------------------------------------------------
## Method `pgu.transformator$trafoType`
## ------------------------------------------------

y <- x$trafoType(feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$setTrafoType`
## ------------------------------------------------

x$setTrafoType(feature = "infected", type = "logNorm")

## ------------------------------------------------
## Method `pgu.transformator$addConstant`
## ------------------------------------------------

y <- x$addConstant(feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$mirrorLogic`
## ------------------------------------------------

y <- x$mirrorLogic(feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$setMirrorLogic`
## ------------------------------------------------

x$setMirrorLogic(feature = "infected", logic = FALSE)

## ------------------------------------------------
## Method `pgu.transformator$lambdaLOP`
## ------------------------------------------------

y <- x$lambdaLOP(feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$setLambdaLOP`
## ------------------------------------------------

x$setLambdaLOP(feature = "infected", lambda = 2)

## ------------------------------------------------
## Method `pgu.transformator$lambdaBC`
## ------------------------------------------------

y <- x$lambdaBC(feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$lambdaAS`
## ------------------------------------------------

y <- x$lambdaAS(feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$featureIdx`
## ------------------------------------------------

idx <- x$featureIdx(feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$addConstGenerator`
## ------------------------------------------------

idx <- x$addConstGenerator(value = -0.5)

## ------------------------------------------------
## Method `pgu.transformator$mirrorNumeric`
## ------------------------------------------------

y <- x$mirrorNumeric(value = c(-0.5, 0.0, 0.5, 1.0))

## ------------------------------------------------
## Method `pgu.transformator$mirrorData`
## ------------------------------------------------

y <- x$mirrorData(data)

## ------------------------------------------------
## Method `pgu.transformator$calculateAddConst`
## ------------------------------------------------

y <- x$calculateAddConst(data)

## ------------------------------------------------
## Method `pgu.transformator$translateNumeric`
## ------------------------------------------------

y <- x$translateNumeric(value = c(0.1, 0.2, 0.3), const = 4.0)

## ------------------------------------------------
## Method `pgu.transformator$translateData`
## ------------------------------------------------

y <- x$translateData(data)

## ------------------------------------------------
## Method `pgu.transformator$backTranslateNumeric`
## ------------------------------------------------

y <- x$backTranslateNumeric(value = c(4.1, 4.2, 4.3), const = 4.0)

## ------------------------------------------------
## Method `pgu.transformator$backTranslateData`
## ------------------------------------------------

y <- x$backTranslateData(data)

## ------------------------------------------------
## Method `pgu.transformator$lambdaEstimator`
## ------------------------------------------------

y <- x$lambdaEstimator(value = c(4, 5, 6), feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$estimateLambda_temp`
## ------------------------------------------------

y <- x$estimateLambda(data)

## ------------------------------------------------
## Method `pgu.transformator$estimateLambda`
## ------------------------------------------------

y <- x$estimateLambda(data)

## ------------------------------------------------
## Method `pgu.transformator$normalizeArcSine`
## ------------------------------------------------

y <- x$normalizeArcSine(value)

## ------------------------------------------------
## Method `pgu.transformator$optimizeTukeyLadderOfPowers`
## ------------------------------------------------

y <- x$optimizeTukeyLadderOfPowers(value)

## ------------------------------------------------
## Method `pgu.transformator$optimizeBoxCox`
## ------------------------------------------------

y <- x$optimizeBoxCox(value)

## ------------------------------------------------
## Method `pgu.transformator$transformNumeric`
## ------------------------------------------------

y <- x$transformNumeric(value = c(4, 5, 6), feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$transformData`
## ------------------------------------------------

y <- x$transformData(data)

## ------------------------------------------------
## Method `pgu.transformator$transformLogModulus`
## ------------------------------------------------

y <- x$transformLogModulus(value, base = 2)

## ------------------------------------------------
## Method `pgu.transformator$transformSquareRoot`
## ------------------------------------------------

y <- x$transformSquareRoot(value)

## ------------------------------------------------
## Method `pgu.transformator$transformCubeRoot`
## ------------------------------------------------

y <- x$transformCubeRoot(value)

## ------------------------------------------------
## Method `pgu.transformator$transformArcsine`
## ------------------------------------------------

y <- x$transformArcsine(value, lambda = max(value))

## ------------------------------------------------
## Method `pgu.transformator$transformInverse`
## ------------------------------------------------

y <- x$transformInverse(value)

## ------------------------------------------------
## Method `pgu.transformator$transformTukeyLadderOfPowers`
## ------------------------------------------------

y <- x$transformTukeyLadderOfPowers(value, lambda = 0)

## ------------------------------------------------
## Method `pgu.transformator$transformBoxCox`
## ------------------------------------------------

y <- x$transformBoxCox(value, lambda = 0)

## ------------------------------------------------
## Method `pgu.transformator$inverseTransformNumeric`
## ------------------------------------------------

y <- x$inverseTransformNumeric(value = c(4, 5, 6), feature = "infected")

## ------------------------------------------------
## Method `pgu.transformator$inverseTransformData`
## ------------------------------------------------

y <- x$inverseTransformData(data)

## ------------------------------------------------
## Method `pgu.transformator$inverseTransformLogModulus`
## ------------------------------------------------

y <- x$inverseTransformLogModulus(value, base = 2)

## ------------------------------------------------
## Method `pgu.transformator$inverseTransformSquareRoot`
## ------------------------------------------------

y <- x$inverseTransformSquareRoot(value)

## ------------------------------------------------
## Method `pgu.transformator$inverseTransformCubeRoot`
## ------------------------------------------------

y <- x$inverseTransformCubeRoot(value)

## ------------------------------------------------
## Method `pgu.transformator$inverseTransformArcsine`
## ------------------------------------------------

y <- x$inverseTransformArcsine(value, lambda = max(value))

## ------------------------------------------------
## Method `pgu.transformator$inverseTransformInverse`
## ------------------------------------------------

y <- x$inverseTransformInverse(value)

## ------------------------------------------------
## Method `pgu.transformator$inverseTransformTukeyLadderOfPowers`
## ------------------------------------------------

y <- x$inverseTransformTukeyLadderOfPowers(value, lambda = 0)

## ------------------------------------------------
## Method `pgu.transformator$inverseTransformBoxCox`
## ------------------------------------------------

y <- x$inverseTransformBoxCox(value, lambda = 0)

## ------------------------------------------------
## Method `pgu.transformator$fit`
## ------------------------------------------------

x$fit(data)

## ------------------------------------------------
## Method `pgu.transformator$mutateData`
## ------------------------------------------------

y <- x$mutateData(data)

## ------------------------------------------------
## Method `pgu.transformator$reverseMutateData`
## ------------------------------------------------

y <- x$reverseMutateData(data)
}
\author{
Sebastian Malkusch, \email{malkusch@med.uni-frankfurt.de}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{trafoAlphabet}}{Returns the instance variable trafoAlphabte.}

\item{\code{trafoParameter}}{Returns the instance variable trafoParameter.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{pgu.transformator$new()}}
\item \href{#method-finalize}{\code{pgu.transformator$finalize()}}
\item \href{#method-print}{\code{pgu.transformator$print()}}
\item \href{#method-resetTrafoParameter}{\code{pgu.transformator$resetTrafoParameter()}}
\item \href{#method-trafoType}{\code{pgu.transformator$trafoType()}}
\item \href{#method-setTrafoType}{\code{pgu.transformator$setTrafoType()}}
\item \href{#method-addConstant}{\code{pgu.transformator$addConstant()}}
\item \href{#method-mirrorLogic}{\code{pgu.transformator$mirrorLogic()}}
\item \href{#method-setMirrorLogic}{\code{pgu.transformator$setMirrorLogic()}}
\item \href{#method-lambdaLOP}{\code{pgu.transformator$lambdaLOP()}}
\item \href{#method-setLambdaLOP}{\code{pgu.transformator$setLambdaLOP()}}
\item \href{#method-lambdaBC}{\code{pgu.transformator$lambdaBC()}}
\item \href{#method-lambdaAS}{\code{pgu.transformator$lambdaAS()}}
\item \href{#method-featureIdx}{\code{pgu.transformator$featureIdx()}}
\item \href{#method-addConstGenerator}{\code{pgu.transformator$addConstGenerator()}}
\item \href{#method-mirrorNumeric}{\code{pgu.transformator$mirrorNumeric()}}
\item \href{#method-mirrorData}{\code{pgu.transformator$mirrorData()}}
\item \href{#method-calculateAddConst}{\code{pgu.transformator$calculateAddConst()}}
\item \href{#method-translateNumeric}{\code{pgu.transformator$translateNumeric()}}
\item \href{#method-translateData}{\code{pgu.transformator$translateData()}}
\item \href{#method-backTranslateNumeric}{\code{pgu.transformator$backTranslateNumeric()}}
\item \href{#method-backTranslateData}{\code{pgu.transformator$backTranslateData()}}
\item \href{#method-lambdaEstimator}{\code{pgu.transformator$lambdaEstimator()}}
\item \href{#method-estimateLambda_temp}{\code{pgu.transformator$estimateLambda_temp()}}
\item \href{#method-estimateLambda}{\code{pgu.transformator$estimateLambda()}}
\item \href{#method-normalizeArcSine}{\code{pgu.transformator$normalizeArcSine()}}
\item \href{#method-optimizeTukeyLadderOfPowers}{\code{pgu.transformator$optimizeTukeyLadderOfPowers()}}
\item \href{#method-optimizeBoxCox}{\code{pgu.transformator$optimizeBoxCox()}}
\item \href{#method-transformNumeric}{\code{pgu.transformator$transformNumeric()}}
\item \href{#method-transformData}{\code{pgu.transformator$transformData()}}
\item \href{#method-transformLogModulus}{\code{pgu.transformator$transformLogModulus()}}
\item \href{#method-transformSquareRoot}{\code{pgu.transformator$transformSquareRoot()}}
\item \href{#method-transformCubeRoot}{\code{pgu.transformator$transformCubeRoot()}}
\item \href{#method-transformArcsine}{\code{pgu.transformator$transformArcsine()}}
\item \href{#method-transformInverse}{\code{pgu.transformator$transformInverse()}}
\item \href{#method-transformTukeyLadderOfPowers}{\code{pgu.transformator$transformTukeyLadderOfPowers()}}
\item \href{#method-transformBoxCox}{\code{pgu.transformator$transformBoxCox()}}
\item \href{#method-inverseTransformNumeric}{\code{pgu.transformator$inverseTransformNumeric()}}
\item \href{#method-inverseTransformData}{\code{pgu.transformator$inverseTransformData()}}
\item \href{#method-inverseTransformLogModulus}{\code{pgu.transformator$inverseTransformLogModulus()}}
\item \href{#method-inverseTransformSquareRoot}{\code{pgu.transformator$inverseTransformSquareRoot()}}
\item \href{#method-inverseTransformCubeRoot}{\code{pgu.transformator$inverseTransformCubeRoot()}}
\item \href{#method-inverseTransformArcsine}{\code{pgu.transformator$inverseTransformArcsine()}}
\item \href{#method-inverseTransformInverse}{\code{pgu.transformator$inverseTransformInverse()}}
\item \href{#method-inverseTransformTukeyLadderOfPowers}{\code{pgu.transformator$inverseTransformTukeyLadderOfPowers()}}
\item \href{#method-inverseTransformBoxCox}{\code{pgu.transformator$inverseTransformBoxCox()}}
\item \href{#method-fit}{\code{pgu.transformator$fit()}}
\item \href{#method-mutateData}{\code{pgu.transformator$mutateData()}}
\item \href{#method-reverseMutateData}{\code{pgu.transformator$reverseMutateData()}}
\item \href{#method-clone}{\code{pgu.transformator$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates and returns a new \code{pgu.transformator} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$new(data_df = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_df}}{The data to be analyzed.
(tibble::tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{pgu.transformator} object.
(pguIMP::pgu.transformator)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- tibble:tibble()
x <- pguIMP:pgu.transformator$new(data_df = y)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-finalize}{}}}
\subsection{Method \code{finalize()}}{
Clears the heap and
indicates that instance of \code{pgu.transformator} is removed from heap.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Prints instance variables of a \code{pgu.transformator} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
string
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$print()
print(x)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-resetTrafoParameter"></a>}}
\if{latex}{\out{\hypertarget{method-resetTrafoParameter}{}}}
\subsection{Method \code{resetTrafoParameter()}}{
Resets instance variable \code{trafoParameter}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$resetTrafoParameter(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{Dataframe to be analyzed.
(tibble::tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$resetTrafoParameter(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-trafoType"></a>}}
\if{latex}{\out{\hypertarget{method-trafoType}{}}}
\subsection{Method \code{trafoType()}}{
Returns entry of \code{trafoType}
for user defined attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$trafoType(feature = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Value of entry.
(character)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$trafoType(feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setTrafoType"></a>}}
\if{latex}{\out{\hypertarget{method-setTrafoType}{}}}
\subsection{Method \code{setTrafoType()}}{
Sets entry of \code{trafoType}
for user defined attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$setTrafoType(feature = "character", type = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}

\item{\code{type}}{Trafo type parameter. Valid choices are:
"none", "exponential", "log2", "logNorm", "log10", "arcsine", "tukeyLOP", "boxCox".
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$setTrafoType(feature = "infected", type = "logNorm")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addConstant"></a>}}
\if{latex}{\out{\hypertarget{method-addConstant}{}}}
\subsection{Method \code{addConstant()}}{
Returns entry of \code{addConst}
for user defined attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$addConstant(feature = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Value of entry.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$addConstant(feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mirrorLogic"></a>}}
\if{latex}{\out{\hypertarget{method-mirrorLogic}{}}}
\subsection{Method \code{mirrorLogic()}}{
Returns entry of \code{mirrorLogic}
for user defined attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$mirrorLogic(feature = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Value of entry.
(logical)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$mirrorLogic(feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setMirrorLogic"></a>}}
\if{latex}{\out{\hypertarget{method-setMirrorLogic}{}}}
\subsection{Method \code{setMirrorLogic()}}{
Sets entry of \code{mirrorLogic}
for user defined attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$setMirrorLogic(feature = "character", logic = "logical")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}

\item{\code{logic}}{Specifies whether the data should be mirrored at the coordinate origin.
(logical)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$setMirrorLogic(feature = "infected", logic = FALSE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lambdaLOP"></a>}}
\if{latex}{\out{\hypertarget{method-lambdaLOP}{}}}
\subsection{Method \code{lambdaLOP()}}{
Returns entry of \code{lambda_lop}
for user defined attribute.
Lambda is a specific optimization parameter
that is derived from the Tukey-LOP
transfromation procedure.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$lambdaLOP(feature = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Value of entry.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$lambdaLOP(feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setLambdaLOP"></a>}}
\if{latex}{\out{\hypertarget{method-setLambdaLOP}{}}}
\subsection{Method \code{setLambdaLOP()}}{
Sets entry of \code{lambda_lop}
for user defined attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$setLambdaLOP(feature = "character", lambda = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}

\item{\code{lambda}}{Sets the feature specific exponential value.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$setLambdaLOP(feature = "infected", lambda = 2)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lambdaBC"></a>}}
\if{latex}{\out{\hypertarget{method-lambdaBC}{}}}
\subsection{Method \code{lambdaBC()}}{
Returns entry of \code{lambda_bc}
for user defined attribute.
Lambda is a specific optimization parameter
that is derived from the Box-Cox
transfromation procedure.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$lambdaBC(feature = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Value of entry.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$lambdaBC(feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lambdaAS"></a>}}
\if{latex}{\out{\hypertarget{method-lambdaAS}{}}}
\subsection{Method \code{lambdaAS()}}{
Returns entry of \code{lambda_as}
for user defined attribute.
Lambda is a specific optimization parameter
that is derived from the arcsine
transfromation procedure.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$lambdaAS(feature = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Value of entry.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$lambdaAS(feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-featureIdx"></a>}}
\if{latex}{\out{\hypertarget{method-featureIdx}{}}}
\subsection{Method \code{featureIdx()}}{
Returns the index of a pgu.normDist object wihtin the instance variable \code{trafoParameter}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$featureIdx(feature = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{Attribute's name.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Index of attribute entry in dataframe
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{idx <- x$featureIdx(feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addConstGenerator"></a>}}
\if{latex}{\out{\hypertarget{method-addConstGenerator}{}}}
\subsection{Method \code{addConstGenerator()}}{
Calculates and returns the addConst.
A constant that prevents the occurrence of negative values as well as zero,
if added to an attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$addConstGenerator(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{The smallest of the attribute's values.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The addConst for the attribute
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{idx <- x$addConstGenerator(value = -0.5)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mirrorNumeric"></a>}}
\if{latex}{\out{\hypertarget{method-mirrorNumeric}{}}}
\subsection{Method \code{mirrorNumeric()}}{
Mirrors the assigned values at the coordinate origin.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$mirrorNumeric(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{Value or vector of values.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Value or vector of values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$mirrorNumeric(value = c(-0.5, 0.0, 0.5, 1.0))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mirrorData"></a>}}
\if{latex}{\out{\hypertarget{method-mirrorData}{}}}
\subsection{Method \code{mirrorData()}}{
Calls the class' mirrorNumeric function on all numeric attributes of a data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$mirrorData(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame
(tibble::tibble)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$mirrorData(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-calculateAddConst"></a>}}
\if{latex}{\out{\hypertarget{method-calculateAddConst}{}}}
\subsection{Method \code{calculateAddConst()}}{
Calculates the addConst value for each attribute of the assigned data frame,
by calling the class' addConstGenerator function.
The results are stored in addConst attribute of the trafoParameter instance variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$calculateAddConst(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$calculateAddConst(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-translateNumeric"></a>}}
\if{latex}{\out{\hypertarget{method-translateNumeric}{}}}
\subsection{Method \code{translateNumeric()}}{
Translates the assigned values by a constant.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$translateNumeric(value = "numeric", const = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be translated.
(numeric)}

\item{\code{const}}{A constant value.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric or a vector of numerics.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$translateNumeric(value = c(0.1, 0.2, 0.3), const = 4.0)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-translateData"></a>}}
\if{latex}{\out{\hypertarget{method-translateData}{}}}
\subsection{Method \code{translateData()}}{
Translates each attribute of the assigned data frame,
by calling the class' translateNumeric function.
The respective addConst values of the individual attributes of the data frame
serve as const variables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$translateData(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame.
(tibble:tibble)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$translateData(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-backTranslateNumeric"></a>}}
\if{latex}{\out{\hypertarget{method-backTranslateNumeric}{}}}
\subsection{Method \code{backTranslateNumeric()}}{
Back-translates the assigned values by a constant.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$backTranslateNumeric(value = "numeric", const = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be back-translated.
(numeric)}

\item{\code{const}}{A constant value.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric or a vector of numerics.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$backTranslateNumeric(value = c(4.1, 4.2, 4.3), const = 4.0)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-backTranslateData"></a>}}
\if{latex}{\out{\hypertarget{method-backTranslateData}{}}}
\subsection{Method \code{backTranslateData()}}{
Back-translates each attribute of the assigned data frame,
by calling the class' backTranslateNumeric function.
The respective addConst values of the individual attributes of the data frame
serve as const variables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$backTranslateData(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame.
(tibble:tibble)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$backTranslateData(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lambdaEstimator"></a>}}
\if{latex}{\out{\hypertarget{method-lambdaEstimator}{}}}
\subsection{Method \code{lambdaEstimator()}}{
Estimates the lambda factor for the given values,
that are assigned to a user defined attribute..
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$lambdaEstimator(value = "numeric", feature = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}

\item{\code{feature}}{The attribute which the given values are assigned to.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The specific lambda factor.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$lambdaEstimator(value = c(4, 5, 6), feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-estimateLambda_temp"></a>}}
\if{latex}{\out{\hypertarget{method-estimateLambda_temp}{}}}
\subsection{Method \code{estimateLambda_temp()}}{
Estimates the lambda factor for each attribute of the assigned data frame,
by calling the class' lambdaEstimator function.
The respective lambda values of the individual attributes of the data frame
are stored in the lambda attribute of the instance variable trafoParameter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$estimateLambda_temp(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$estimateLambda(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-estimateLambda"></a>}}
\if{latex}{\out{\hypertarget{method-estimateLambda}{}}}
\subsection{Method \code{estimateLambda()}}{
Estimates the arcsine transformation lambda factor
for each attribute of the assigned data frame.
The respective lambda values of the individual attributes of the data frame
are stored in the lambda attribute of the instance variable trafoParameter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$estimateLambda(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$estimateLambda(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-normalizeArcSine"></a>}}
\if{latex}{\out{\hypertarget{method-normalizeArcSine}{}}}
\subsection{Method \code{normalizeArcSine()}}{
Estimates the lambda factor for an arcsine transformation for the given values,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$normalizeArcSine(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The specific lambda factor.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$normalizeArcSine(value)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-optimizeTukeyLadderOfPowers"></a>}}
\if{latex}{\out{\hypertarget{method-optimizeTukeyLadderOfPowers}{}}}
\subsection{Method \code{optimizeTukeyLadderOfPowers()}}{
Estimates the lambda factor for a tukeyLOP transformation for the given values,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$optimizeTukeyLadderOfPowers(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The specific lambda factor.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$optimizeTukeyLadderOfPowers(value)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-optimizeBoxCox"></a>}}
\if{latex}{\out{\hypertarget{method-optimizeBoxCox}{}}}
\subsection{Method \code{optimizeBoxCox()}}{
Estimates the lambda factor for a boxcox transformation for the given values,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$optimizeBoxCox(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The specific lambda factor.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$optimizeBoxCox(value)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformNumeric"></a>}}
\if{latex}{\out{\hypertarget{method-transformNumeric}{}}}
\subsection{Method \code{transformNumeric()}}{
Transforms the given numeric values,
that are assigned to a user defined attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$transformNumeric(value = "numeric", feature = "character")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be tranformed.
(numeric)}

\item{\code{feature}}{The attribute which the given values are assigned to.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A transfromed version of the given numeric or vector of numerics.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$transformNumeric(value = c(4, 5, 6), feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformData"></a>}}
\if{latex}{\out{\hypertarget{method-transformData}{}}}
\subsection{Method \code{transformData()}}{
Transforms each attribute of the assigned data frame,
by calling the class' tranformNumeric function.
The respective lambda values of the individual attributes of the data frame
are read from the lambda attribute of the instance variable trafoParameter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$transformData(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$transformData(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformLogModulus"></a>}}
\if{latex}{\out{\hypertarget{method-transformLogModulus}{}}}
\subsection{Method \code{transformLogModulus()}}{
Performes a log transformation for the given values,
based on a user defined base value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$transformLogModulus(value = "numeric", base = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}

\item{\code{base}}{Logarithmic base.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$transformLogModulus(value, base = 2)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformSquareRoot"></a>}}
\if{latex}{\out{\hypertarget{method-transformSquareRoot}{}}}
\subsection{Method \code{transformSquareRoot()}}{
Performes a square root transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$transformSquareRoot(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$transformSquareRoot(value)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformCubeRoot"></a>}}
\if{latex}{\out{\hypertarget{method-transformCubeRoot}{}}}
\subsection{Method \code{transformCubeRoot()}}{
Performes a cube root transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$transformCubeRoot(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$transformCubeRoot(value)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformArcsine"></a>}}
\if{latex}{\out{\hypertarget{method-transformArcsine}{}}}
\subsection{Method \code{transformArcsine()}}{
Performes an arcsine transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$transformArcsine(value = "numeric", lambda = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}

\item{\code{lambda}}{Normalization factor.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$transformArcsine(value, lambda = max(value))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformInverse"></a>}}
\if{latex}{\out{\hypertarget{method-transformInverse}{}}}
\subsection{Method \code{transformInverse()}}{
Performes an inverse transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$transformInverse(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$transformInverse(value)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformTukeyLadderOfPowers"></a>}}
\if{latex}{\out{\hypertarget{method-transformTukeyLadderOfPowers}{}}}
\subsection{Method \code{transformTukeyLadderOfPowers()}}{
Performes a tukeyLOP transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$transformTukeyLadderOfPowers(
  value = "numeric",
  lambda = "numeric"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}

\item{\code{lambda}}{Lambda factor.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$transformTukeyLadderOfPowers(value, lambda = 0)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformBoxCox"></a>}}
\if{latex}{\out{\hypertarget{method-transformBoxCox}{}}}
\subsection{Method \code{transformBoxCox()}}{
Performes a boxcox transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$transformBoxCox(value = "numeric", lambda = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}

\item{\code{lambda}}{Lambda factor.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$transformBoxCox(value, lambda = 0)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inverseTransformNumeric"></a>}}
\if{latex}{\out{\hypertarget{method-inverseTransformNumeric}{}}}
\subsection{Method \code{inverseTransformNumeric()}}{
Inverse transforms the given numeric values,
that are assigned to a user defined attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$inverseTransformNumeric(
  value = "numeric",
  feature = "character"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be tranformed.
(numeric)}

\item{\code{feature}}{The attribute which the given values are assigned to.
(character)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An inverse transfromed version of the given numeric or vector of numerics.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$inverseTransformNumeric(value = c(4, 5, 6), feature = "infected")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inverseTransformData"></a>}}
\if{latex}{\out{\hypertarget{method-inverseTransformData}{}}}
\subsection{Method \code{inverseTransformData()}}{
Inverse transforms each attribute of the assigned data frame,
by calling the class' tranformNumeric function.
The respective lambda values of the individual attributes of the data frame
are read from the lambda attribute of the instance variable trafoParameter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$inverseTransformData(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$inverseTransformData(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inverseTransformLogModulus"></a>}}
\if{latex}{\out{\hypertarget{method-inverseTransformLogModulus}{}}}
\subsection{Method \code{inverseTransformLogModulus()}}{
Performes an inverse log transformation for the given values,
based on a user defined base value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$inverseTransformLogModulus(
  value = "numeric",
  base = "numeric"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}

\item{\code{base}}{Logarithmic base.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$inverseTransformLogModulus(value, base = 2)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inverseTransformSquareRoot"></a>}}
\if{latex}{\out{\hypertarget{method-inverseTransformSquareRoot}{}}}
\subsection{Method \code{inverseTransformSquareRoot()}}{
Performes an inverse square root transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$inverseTransformSquareRoot(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$inverseTransformSquareRoot(value)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inverseTransformCubeRoot"></a>}}
\if{latex}{\out{\hypertarget{method-inverseTransformCubeRoot}{}}}
\subsection{Method \code{inverseTransformCubeRoot()}}{
Performes an inverse cube root transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$inverseTransformCubeRoot(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$inverseTransformCubeRoot(value)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inverseTransformArcsine"></a>}}
\if{latex}{\out{\hypertarget{method-inverseTransformArcsine}{}}}
\subsection{Method \code{inverseTransformArcsine()}}{
Performes an inverse arcsine transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$inverseTransformArcsine(
  value = "numeric",
  lambda = "numeric"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}

\item{\code{lambda}}{Normalization factor.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$inverseTransformArcsine(value, lambda = max(value))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inverseTransformInverse"></a>}}
\if{latex}{\out{\hypertarget{method-inverseTransformInverse}{}}}
\subsection{Method \code{inverseTransformInverse()}}{
Performes an inverse inverse-transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$inverseTransformInverse(value = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$inverseTransformInverse(value)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inverseTransformTukeyLadderOfPowers"></a>}}
\if{latex}{\out{\hypertarget{method-inverseTransformTukeyLadderOfPowers}{}}}
\subsection{Method \code{inverseTransformTukeyLadderOfPowers()}}{
Performes an inverse tukeyLOP transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$inverseTransformTukeyLadderOfPowers(
  value = "numeric",
  lambda = "numeric"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}

\item{\code{lambda}}{Lambda factor.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$inverseTransformTukeyLadderOfPowers(value, lambda = 0)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inverseTransformBoxCox"></a>}}
\if{latex}{\out{\hypertarget{method-inverseTransformBoxCox}{}}}
\subsection{Method \code{inverseTransformBoxCox()}}{
Performes an inverse boxcox transformation for the given values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$inverseTransformBoxCox(value = "numeric", lambda = "numeric")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric or a vector of numerics to be analyzed.
(numeric)}

\item{\code{lambda}}{Lambda factor.
(numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The transformed values.
(numeric)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$inverseTransformBoxCox(value, lambda = 0)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fit"></a>}}
\if{latex}{\out{\hypertarget{method-fit}{}}}
\subsection{Method \code{fit()}}{
Estimate all transformation parameters(lambda, addConst,...)
for each attribute of a given data frame.
The function calls the class' functions calculateAddConst and estimateLambda.
The results are stored in the respective attributes of the instance variable trafoParameter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$fit(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$fit(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mutateData"></a>}}
\if{latex}{\out{\hypertarget{method-mutateData}{}}}
\subsection{Method \code{mutateData()}}{
Mutates the values of each attribute of a given data frame.
Here, mutation is defined as the cesecutive sequence of the class'
functions mirrorData, tranlsateData and transfromData.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$mutateData(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A mutated data frame.
(tibble::tibble)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$mutateData(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reverseMutateData"></a>}}
\if{latex}{\out{\hypertarget{method-reverseMutateData}{}}}
\subsection{Method \code{reverseMutateData()}}{
Re-mutates the values of each attribute of a given data frame.
Here, re-mutation is defined as the cesecutive sequence of the class'
functions inverseTransformData, backTranslateData, mirrorData
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$reverseMutateData(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame.
(tibble:tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A mutated data frame.
(tibble::tibble)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$reverseMutateData(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.transformator$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
