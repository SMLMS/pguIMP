% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pguFilter.R
\name{pgu.filter}
\alias{pgu.filter}
\title{pgu.filter}
\format{
\link[R6:R6Class]{R6::R6Class} object.
}
\description{
Filter the pguIMP dataset.
}
\details{
The filtering is done by colum and row indices.
}
\section{Construction}{

x <- pguIMP::pgu.filter$new(data)
}

\examples{

## ------------------------------------------------
## Method `pgu.filter$new`
## ------------------------------------------------

y <- tibble:tibble()
x <- pguIMP:pgu.filter$new(data = y)

## ------------------------------------------------
## Method `pgu.filter$print`
## ------------------------------------------------

x$print()
print(x)

## ------------------------------------------------
## Method `pgu.filter$resetColIdx`
## ------------------------------------------------

x$resetColIdx(data)

## ------------------------------------------------
## Method `pgu.filter$resetRowIdx`
## ------------------------------------------------

x$resetRowIdx(data)

## ------------------------------------------------
## Method `pgu.filter$resetFilter`
## ------------------------------------------------

x$resetFilter(data)

## ------------------------------------------------
## Method `pgu.filter$filter`
## ------------------------------------------------

y <- x$filter(data)

## ------------------------------------------------
## Method `pgu.filter$filterRows`
## ------------------------------------------------

y <- x$filterRows(data)
}
\author{
Sebastian Malkusch, \email{malkusch@med.uni-frankfurt.de}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{colIdx}}{Returns the instance variable colIdx
(numeric)}

\item{\code{setColIdx}}{Sets the instance variable colIdx
(numeric)}

\item{\code{rowIdx}}{Returns the instance variable rowIdx
(numeric)}

\item{\code{setRowIdx}}{Sets the instance variable rowIdx
(numeric)}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{pgu.filter$new()}}
\item \href{#method-finalize}{\code{pgu.filter$finalize()}}
\item \href{#method-print}{\code{pgu.filter$print()}}
\item \href{#method-resetColIdx}{\code{pgu.filter$resetColIdx()}}
\item \href{#method-resetRowIdx}{\code{pgu.filter$resetRowIdx()}}
\item \href{#method-resetFilter}{\code{pgu.filter$resetFilter()}}
\item \href{#method-filter}{\code{pgu.filter$filter()}}
\item \href{#method-filterRows}{\code{pgu.filter$filterRows()}}
\item \href{#method-clone}{\code{pgu.filter$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates and returns a new \code{pgu.filter} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.filter$new(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data to be analyzed.
(tibble::tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{pgu.filter} object.
(pguIMP::pgu.optimizer)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- tibble:tibble()
x <- pguIMP:pgu.filter$new(data = y)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-finalize}{}}}
\subsection{Method \code{finalize()}}{
Clears the heap and
indicates that instance of \code{pgu.filter} is removed from heap.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.filter$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Prints instance variables of a \code{pgu.filter} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.filter$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
string
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$print()
print(x)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-resetColIdx"></a>}}
\if{latex}{\out{\hypertarget{method-resetColIdx}{}}}
\subsection{Method \code{resetColIdx()}}{
Resets the filter parameter colIdx to the full dataframe.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.filter$resetColIdx(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data to be analyzed.
(tibble::tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$resetColIdx(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-resetRowIdx"></a>}}
\if{latex}{\out{\hypertarget{method-resetRowIdx}{}}}
\subsection{Method \code{resetRowIdx()}}{
Resets the filter parameter rowIdx to the full dataframe.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.filter$resetRowIdx(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data to be analyzed.
(tibble::tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$resetRowIdx(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-resetFilter"></a>}}
\if{latex}{\out{\hypertarget{method-resetFilter}{}}}
\subsection{Method \code{resetFilter()}}{
Resets the filter parameter colIdx and rowIdx to the full dataframe.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.filter$resetFilter(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data to be analyzed.
(tibble::tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{x$resetFilter(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-filter"></a>}}
\if{latex}{\out{\hypertarget{method-filter}{}}}
\subsection{Method \code{filter()}}{
Filters and returns the given data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.filter$filter(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data to be analyzed.
(tibble::tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The filtered data frame
(tibble::tibble)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$filter(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-filterRows"></a>}}
\if{latex}{\out{\hypertarget{method-filterRows}{}}}
\subsection{Method \code{filterRows()}}{
Filters and returns the given data frame.
In contrast to the filter function, this function only
filters the rows.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.filter$filterRows(data = "tbl_df")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data to be analyzed.
(tibble::tibble)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The filtered data frame
(tibble::tibble)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{y <- x$filterRows(data)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pgu.filter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
